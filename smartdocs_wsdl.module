<?php
/**
 * @file
 * Provides a UI client for SOAP services
 */

include_once 'smartdocs_wsdl.inc';

/**
 * hook_entity_presave()
 */
function smartdocs_wsdl_entity_presave($entity, $type) {
   /* Create nodes for methods */
  if ($type == 'wsclient_service' && $entity->op == 'Save' && is_numeric($entity->id)) {
	  global $user;
    // List of new operations
    $operations = $entity->operations;
    // Get old operations for this service
    $query = db_select('node', 'n');
    $query->innerjoin('field_data_field_service_ref', 'sr', 'sr.entity_id = n.nid');
    $query->fields('n', array('nid', 'title'));
    $query->condition('sr.field_service_ref_target_id', $entity->id, '=');
    $result = $query->execute();
    while ($node = $result->fetchAssoc()) {
      // If old operation exists in new operations list
      if (isset($operations[$node['title']])) {
        // Get new operation data
        $operation = $operations[$node['title']];
        // Load old operation node
        $old_node = node_load($node['nid']);
        // Clear old parameters data
        $old_node->field_parameters['und'] = array();
        // Set new parameters data
        $i = 0;
        foreach ($operation['parameter'] as $param_name => $parameter) {
          $old_node->field_parameters['und'][$i]['value'] = $param_name . ': ' . $parameter['type'];
          $i++;
        }
        // Update old operation node
        node_save($old_node);
        // Unset old operation from new operations list
        unset($operations[$node['title']]);
      }
      // Else if old operation does not exist in new operations list
      else {
        // Delete old operation node
        node_delete($node['nid']);
      }
    }
    // New operations left
    foreach ($operations as $name => $operation) {
      // Create operation node
      $node = new stdClass();
      // Set operation label as node title
      $node->title = $operation['label'];
      $node->type = "operations";
      node_object_prepare($node);
      // Set global user as node user
      $node->uid = $user->uid;
      $node->status = 1;
      // Set service id as reference on the service
      $node->field_service_ref['und'][0]['target_id'] = $entity->id;
      // Set parameters data
      $i = 0;
      foreach ($operation['parameter'] as $param_name => $parameter) {
        $node->field_parameters['und'][$i]['value'] = $param_name . ': ' . $parameter['type'];
        $i++;
      }
      // Save new operation node
      $node = node_submit($node);
      node_save($node);
    }
  }
}

/**
 * hook_entity_delete()
 */
function smartdocs_wsdl_entity_delete($entity, $type) {
  /* Delete nodes for methods */
  if ($type == 'wsclient_service') {
    $query = db_select('node', 'n');
    $query->innerjoin('field_data_field_service_ref', 'sr', 'sr.entity_id = n.nid');
    $query->fields('n', array('nid'));
    $query->condition('sr.field_service_ref_target_id', $entity->id, '=');
    $result = $query->execute();
    $nids = array();
    while ($nid = $result->fetchField()) {
      $nids[] = $nid;
    }
    if (!empty($nids)) {
      node_delete_multiple($nids);
    }
  }
}


/**
 * hook_node_view()
 */
function smartdocs_wsdl_node_view($node, $view_mode, $langcode) {
     // @todo some theming of fields
  if ($node->type == 'operations' && $view_mode == 'full') {
    if(isset($node->field_service_ref['und'][0]['entity'])) {
      $service = $node->field_service_ref['und'][0]['entity'];
      $operation = $node->field_service_ref['und'][0]['entity']->operations[$node->title];
      $form = drupal_get_form('smartdocs_wsdl_operation_invoke', $service, $operation);
      $node->content['reguest'] = array(
        '#markup' => drupal_render($form),
        '#weight' => 0,
      );
    }
  }
}

/**
 * Publish our testing UI and ajax callbacks.
 *
 * hook_menu()
 */
function smartdocs_wsdl_menu() {
  $id_count = 1;
  $op_count = $id_count + 2;
  $dt_count = $op_count;
  $ct_count = $op_count + 1;
  $ct_step_count =  $ct_count + 1;

  $items['soap/%wsclient_service/certify/%/%'] = array(
    'title' => 'certify service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_certify_operation_invoke', 1, 3, 4),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  ); 

  $items['soap/%wsclient_service/operation/%wsclient_ui_operation/invoke'] = array(
    'title' => 'invoke operation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_operation_invoke', $id_count, $op_count),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  );

  $items['soap/%wsclient_service/type/%wsclient_ui_type'] = array(
    'title' => 'view datatypes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_type_viewer', $id_count, $dt_count),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  ); 

  $items['soap/%wsclient_service'] = array(
    'title' => 'view operations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_operation_viewer', $id_count),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  ); 
  return $items;
}

/**
 * Maps the type name from the name used by the remote info to the rules name.
 */
function smartdocs_wsdl_map_type($service_name, $service_types, $type) {
  if (is_array($type)) {
    foreach ($type as $key => $entry) {
      $type[$key] = smartdocs_wsdl_map_type($service_name, $service_types, $entry);
    }
    return $type;
  }
  if (isset($service_types[$type])) {
    //return 'smartdocs_wsdl_' . $service_name . '_' . $type;
    return $type;
  }
  if (strpos($type, 'list<') === 0 && isset($service_types[substr($type, 5, -1)])) {
    return 'list<smartdocs_wsdl_' . $service_name . '_' . substr($type, 5, -1) . '>';
  }
  return $type;
}


/*Get webservice label for soap_api/% view from wsclient_service custom entity in database this is the only place this info is stored */
function smartdocs_wsdl_views_pre_render(&$view) {
  if ($view->name == 'operations' && $view->current_display == 'page') {
    $view->build_info['title'] = db_select('wsclient_service', 's')
      ->fields('s', array('label')) // Get label column from wsclient_service table which is human readable name of webservice
      ->condition('s.id', $view->args[0])
      ->execute()
      ->fetchField();
  }
}
