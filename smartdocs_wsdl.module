<?php
/**
 * @file
 * Provides a UI client for SOAP services
 */

include_once 'smartdocs_wsdl.inc';
include_once 'smartdocs_wsdl.endpoint.inc';

/**
 * Implements hook_menu_alter().
 *
 * Hide default webservice menu because it could confuse users, if we make this contrib may want to remove this or make it conditional.
 */
function smartdocs_wsdl_menu_alter(&$items) {
  $items['admin/config/services']['access callback'] = FALSE;
}

/**
 * Publish our testing UI and ajax callbacks.
 *
 * Implements hook_menu().
 */
function smartdocs_wsdl_menu() {
  $id_count = 1;
  $op_count = $id_count + 2;
  $dt_count = $op_count;
  $ct_count = $op_count + 1;
  $ct_step_count =  $ct_count + 1;

  $items['soap/%wsclient_service/certify/%/%'] = array(
    'title' => 'certify service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_certify_operation_invoke', 1, 3, 4),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  );

  $items['soap/%wsclient_service/operation/%wsclient_ui_operation/invoke'] = array(
    'title' => 'invoke operation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_operation_invoke', $id_count, $op_count),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  );

  $items['soap/%wsclient_service/type/%wsclient_ui_type'] = array(
    'title' => 'view datatypes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_type_viewer', $id_count, $dt_count),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  );

  $items['soap/%wsclient_service'] = array(
    'title' => 'view operations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_operation_viewer', $id_count),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  );

  $items['smartdocs_wsdl_import'] = array(
    'title' => 'SmartDocs WSDL Import',
    'page callback' => 'smartdocs_wsdl_import',
    'delivery callback' => 'drupal_json_output',
    'access callback' => 'smartdocs_wsdl_basic_auth',
    'access arguments' => array(
      'smartdocs_wsdl_import',
      'user_access',
      array('access content'),
    ),
    'type' => MENU_CALLBACK,
  );

  $items['admin/content/smartdocs_wsdl'] = array(
    'title' => 'SmartDocs WSDL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
	'description'=> "SmartDocs for SOAP webservices",
    'weight' => -99,
  );

  $items['admin/content/smartdocs_wsdl/add'] = array(
	'title' => 'Add SmartDocs WSDL',
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('wsclient_service', NULL, 'add'),
    'access callback' => 'entity_access',
    'access arguments' => array('create', 'wsclient_service'),
	'description'=> "Import WSDL files to create docs for your SOAP services",
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/content/smartdocs_wsdl/basic_auth'] = array(
    'title' => 'Basic Auth for REST Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_basic_auth_form'),
    'access arguments' => array('access administration pages'),
	'description'=> "Configure basic auth for your rest endpoint /smartdocs_wsdl_import used for CI/CD",
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

function smartdocs_wsdl_import() {
  if (!empty($_POST)) {
    if (empty($_POST['url'])) {
      return 'ERROR the url parameter';
    }

    $service_id = db_select('wsclient_service', 'ws')
      ->fields('ws', array('id'))
      ->condition('ws.url', $_POST['url'])
      ->execute()
      ->fetchField();
    if (is_numeric($service_id)) {
      $service = entity_load_single('wsclient_service', $service_id);
      smartdocs_wsdl_update_wsclient_service($service);
      return "UPDATE $service_id SERVICE";
    }
    else {
      $service = smartdocs_wsdl_create_wsclient_service($_POST['url'], $_POST['name']);
      smartdocs_wsdl_update_wsclient_service($service);
      return 'CREATE ' . $service->id . ' SERVICE';
    }
  }
  else {
    $wsdl = file_get_contents('php://input');
    //watchdog('smartdocs_wsdl', print_r($wsdl, 1));
    $DOMDocument = new DOMDocument();
    $loaded = $DOMDocument->loadXML($wsdl);
    if (!$loaded) {
      return 'ERROR input file is not XML';
    }

    // Save temp file
    $path = drupal_get_path('module', 'smartdocs_wsdl') . '/tempfile.wsdl';
    file_put_contents($path, $wsdl);
    $client = new SOAPClient($path);

    $service_name = $DOMDocument->getElementsByTagName('service')[0]->getAttribute('name');
    $name = !empty($_GET['name']) ? $_GET['name'] : $service_name;
    if (empty($name)) {
      return 'ERROR: you must specify the name parameter';
    }
    $service_id = db_select('wsclient_service', 'ws')
      ->fields('ws', array('id'))
      ->condition('ws.name', $name)
      ->execute()
      ->fetchField();
    if (is_numeric($service_id)) {
      $service = entity_load_single('wsclient_service', $service_id);
      smartdocs_wsdl_update_wsclient_service_upload($service, $client, $DOMDocument);
      return "UPDATE $service_id SERVICE";
    }
    else {
      $service = smartdocs_wsdl_create_wsclient_service_upload($name);
      smartdocs_wsdl_update_wsclient_service_upload($service, $client, $DOMDocument);
      return 'CREATE ' . $service->id . ' SERVICE';
    }
  }
}

function smartdocs_wsdl_create_wsclient_service($url, $name = '') {
  $service = entity_create('wsclient_service', array('type' => 'soap'));
  if (!empty($name)) {
    $service->label = $name;
    $service->name = strtolower(str_replace('-', '_', str_replace(' ', '_', $name)));
  }
  else {
    $service->label = 'Service ' . date('d-m-Y H:i:s');
    $service->name = 'service_' . date('d_m_Y_H_i_s');
  }
  $service->url = $url;
  $service->status = 1;
  $service->save();
  return $service;
}

function smartdocs_wsdl_create_wsclient_service_upload($name) {
  $service = entity_create('wsclient_service', array('type' => 'soap'));
  $service->label = $name;
  $service->name = strtolower(str_replace('-', '_', str_replace(' ', '_', $name)));
  $service->url = '';
  $service->status = 1;
  $service->save();
  return $service;
}

function smartdocs_wsdl_update_wsclient_service($service) {
  $endpoint = $service->endpoint();
  $endpoint->initializeMetadata(TRUE);
  $service->save();

  $wsdl = file_get_contents($service->url);
  $DOMDocument = new DOMDocument();
  $DOMDocument->loadXML($wsdl);
  smartdocs_wsdl_update_service_operations($service, $DOMDocument);
  rules_clear_cache();
  $service->clearCache();
  //drupal_set_message(t('Operations and data types of the SOAP service have been imported automatically. If the service expects data types with properties as lists (multiple values for the property), please check the multiple flag on those properties. This cannot be auto-detected at the moment.'));
}

function smartdocs_wsdl_update_wsclient_service_upload($service, $client, $DOMDocument) {
  $endpoint = $service->endpoint();
  $endpoint->initializeMetadata(TRUE);
  $service->save();

  // initializeMetadata
  /*$data_types = wsclient_soap_parse_types($client->__getTypes());
  $operations = wsclient_soap_parse_operations($client->__getFunctions());
  $service->datatypes = $data_types;
  $service->operations = $operations;
  $service->clearCache();
  $service->save();*/

  smartdocs_wsdl_update_service_operations($service, $DOMDocument);
  rules_clear_cache();
  $service->clearCache();
  //drupal_set_message(t('Operations and data types of the SOAP service have been imported automatically. If the service expects data types with properties as lists (multiple values for the property), please check the multiple flag on those properties. This cannot be auto-detected at the moment.'));
}

function smartdocs_wsdl_update_service_operations($entity, $DOMDocument) {
  global $user;

  $documentations = $styles = $outputs = array();

  $operations = $DOMDocument->getElementsByTagName('portType')[0]->getElementsByTagName('operation');
  foreach ($operations as $operation) {
    $name = $operation->getAttribute('name');
    // for documentation
    $documentation = $operation->getElementsByTagName('documentation');
    if ($documentation->length > 0) {
      $documentations[$name] = $documentation[0]->nodeValue;
    }
  }

  $operations = $DOMDocument->getElementsByTagName('binding')[0]->childNodes;
  foreach ($operations as $operation) {
    if ($operation->localName == 'operation') {
      $name = $operation->getAttribute('name');
      // for style
      $operation2 = $operation->getElementsByTagName('operation')[0];
      if ($operation2->hasAttribute('style')) {
        $styles[$name] = $operation2->getAttribute('style');
      }
      // for body
      $body = $operation->getElementsByTagName('output')[0]->getElementsByTagName('body');
      if ($body->length > 0) {
        $outputs[$name] = $DOMDocument->saveXML($body[0]);
      }
    }
  }

  // List of new operations
  $operations = $entity->operations;
  // Get old operations for this service
  $query = db_select('node', 'n');
  $query->innerjoin('field_data_field_service_ref', 'sr', 'sr.entity_id = n.nid');
  $query->fields('n', array('nid', 'title'));
  $query->condition('sr.field_service_ref_target_id', $entity->id, '=');
  $result = $query->execute();
  while ($node = $result->fetchAssoc()) {
    // If old operation exists in new operations list
    if (isset($operations[$node['title']])) {
      // Get new operation data
      $operation = $operations[$node['title']];
      // Load old operation node
      $old_node = node_load($node['nid']);
      // Clear old parameters data
      $old_node->field_parameters['und'] = array();
      // Set new parameters data
      $i = 0;
      foreach ($operation['parameter'] as $param_name => $parameter) {
        $old_node->field_parameters['und'][$i]['value'] = $param_name . ': ' . $parameter['type'];
        $i++;
      }
      // Set new documentation, style and output data
      $old_node->field_documentation['und'][0]['value'] = isset($documentations[$operation['label']]) ? $documentations[$operation['label']] : '';
      $old_node->field_style['und'][0]['value'] = isset($styles[$operation['label']]) ? $styles[$operation['label']] : '';
      $old_node->field_output['und'][0]['value'] = isset($outputs[$operation['label']]) ? $outputs[$operation['label']] : '';
      // Update old operation node
      node_save($old_node);
      // Unset old operation from new operations list
      unset($operations[$node['title']]);
    }
    // Else if old operation does not exist in new operations list
    else {
      // Delete old operation node
      node_delete($node['nid']);
    }
  }
  // New operations left
  foreach ($operations as $name => $operation) {
    // Create operation node
    $node = new stdClass();
    // Set operation label as node title
    $node->title = $operation['label'];
    $node->type = "operations";
    node_object_prepare($node);
    // Set global user as node user
    $node->uid = $user->uid;
    $node->status = 1;
    // Set service id as reference on the service
    $node->field_service_ref['und'][0]['target_id'] = $entity->id;
    // Set parameters data
    $i = 0;
    foreach ($operation['parameter'] as $param_name => $parameter) {
      $node->field_parameters['und'][$i]['value'] = $param_name . ': ' . $parameter['type'];
      $i++;
    }
    // Set documentation, style and output data
    $node->field_documentation['und'][0]['value'] = $documentations[$operation['label']] ?: '';
    $node->field_style['und'][0]['value'] = $styles[$operation['label']] ?: '';
    $node->field_output['und'][0]['value'] = $outputs[$operation['label']] ?: '';
    // Save new operation node
    $node = node_submit($node);
    node_save($node);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function smartdocs_wsdl_form_wsclient_service_form_alter(&$form, &$form_state) {
  // Add the description field after the machine name field
  $new_form = array();
  foreach ($form as $key => $data) {
    $new_form[$key] = $data;
    if ($key == 'name') {
      $new_form['description'] = array(
        '#type' => 'textfield',
        '#title' => t('Description'),
        '#maxlength' => 255,
      );
      if (!empty($form_state['wsclient_service']->description)) {
        $new_form['description']['#default_value'] = $form_state['wsclient_service']->description;
      }
    }
  }
  $form = $new_form;

  if (isset($form_state['wsclient_service']->is_new) && $form_state['wsclient_service']->is_new == 1) {
    // Set soap to default on import drop-down and hide
    $form['type']['#default_value'] = 'soap';
    $form['type']['#access'] = FALSE;
  }
  else {
    // Hide the fields
    // $form['operations']['#access'] = FALSE;
    // $form['datatypes']['#access'] = FALSE;
    // $form['global_parameters']['#access'] = FALSE;
  }

  $form['#submit'][] = 'smartdocs_wsdl_wsclient_service_form_submit';
}

/**
 * Submit callback for the web service form to populate operations and data
 * types of the new SOAP service.
 */
function smartdocs_wsdl_wsclient_service_form_submit($form, &$form_state) {
  if ($form_state['values']['type'] == 'soap' && ($form_state['op'] == 'add' || $form_state['op'] == 'edit')) {
    $service_id = $form_state['wsclient_service']->id;
    $service = entity_load_single('wsclient_service', $service_id);
    smartdocs_wsdl_update_wsclient_service($service);
    if ($form['#action'] == '/admin/content/smartdocs_wsdl/add') {
      $form_state['redirect'] = 'admin/content/smartdocs_wsdl';
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function smartdocs_wsdl_entity_insert($entity, $type) {
  if ($type == 'wsclient_service') {
    global $user;
    $entity->uid = $user->uid;
    $entity->created = time();
  }
}

/**
 * Implements hook_entity_delete().
 */
function smartdocs_wsdl_entity_delete($entity, $type) {
  /* delete nodes for methods */
  if ($type == 'wsclient_service') {
    $query = db_select('node', 'n');
    $query->innerjoin('field_data_field_service_ref', 'sr', 'sr.entity_id = n.nid');
    $query->fields('n', array('nid'));
    $query->condition('sr.field_service_ref_target_id', $entity->id, '=');
    $result = $query->execute();
    $nids = array();
    while ($nid = $result->fetchField()) {
      $nids[] = $nid;
    }
    if (!empty($nids)) {
      node_delete_multiple($nids);
    }
  }
}

/**
 * Implements hook_node_view().
 */
function smartdocs_wsdl_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'operations' && $view_mode == 'full') {
    if(isset($node->field_service_ref['und'][0]['entity'])) {
      $service = $node->field_service_ref['und'][0]['entity'];
      $operation = $node->field_service_ref['und'][0]['entity']->operations[$node->title];
      $form = drupal_get_form('smartdocs_wsdl_operation_invoke', $service, $operation);
      $form['transaction']['#attributes']['class'][] = 'element-hidden';
      $node->content['apiform'] = array(
        '#markup' => drupal_render($form),
        '#weight' => 0,
      );
    }
  }
}

function smartdocs_wsdl_basic_auth_form($form, &$form_state) {
  $form['smartdocs_basic_auth_username'] = array(
    '#type' => 'textfield',
    '#title' => 'Username',
    '#default_value' => variable_get('smartdocs_basic_auth_username', ''),
  );
  $form['smartdocs_basic_auth_password'] = array(
    '#type' => 'textfield',
    '#title' => 'Password',
    '#default_value' => variable_get('smartdocs_basic_auth_password', ''),
  );

  return system_settings_form($form);
}

function smartdocs_wsdl_form($form, &$form_state) {
  $form = drupal_get_form('wsclient_service_overview_form', 'wsclient_service');
  $h = $form['table']['#header'];
  $form['table']['#header'] = array($h[0], $h[1], 'User', 'Created', $h[2]);
  $form['table']['#header'][4]['colspan'] -= 2;
  foreach ($form['table']['#rows'] as &$row) {
    $service = $row[0]['data']['#url']['options']['entity'];
   /* if (!empty($service->url)) { //Change label to URL for easy debugging
      $row[0]['data']['#label'] = $service->url;
    }*/
    $row[0]['data']['#url']['path'] = 'soap_apis/' . $row[0]['data']['#url']['options']['entity']->id;
    if ($service->uid > 0) {
      $username = db_select('users', 'u')
        ->fields('u', array('name'))
        ->condition('u.uid', $service->uid)
        ->execute()
        ->fetchField();
      $username = l($username, 'user/' . $service->uid . '/edit');
    }
    else {
      $username = 'REST import';
    }
    $created = date('l m-d-Y H:i:s', $service->created);
    $row = array($row[0], $row[1], $username, $created, $row[2], $row[4]);
  }

  return $form;
}

/**
 * Maps the type name from the name used by the remote info to the rules name.
 */
function smartdocs_wsdl_map_type($service_name, $service_types, $type) {
  if (is_array($type)) {
    foreach ($type as $key => $entry) {
      $type[$key] = smartdocs_wsdl_map_type($service_name, $service_types, $entry);
    }
    return $type;
  }
  if (isset($service_types[$type])) {
    //return 'smartdocs_wsdl_' . $service_name . '_' . $type;
    return $type;
  }
  if (strpos($type, 'list<') === 0 && isset($service_types[substr($type, 5, -1)])) {
    return 'list<smartdocs_wsdl_' . $service_name . '_' . substr($type, 5, -1) . '>';
  }
  return $type;
}

/**
 * Implements hook_views_pre_render().
 */
function smartdocs_wsdl_views_pre_render(&$view) {
  if ($view->name == 'operations' && $view->current_display == 'page') {
    $view->build_info['title'] = db_select('wsclient_service', 's')
      ->fields('s', array('label'))
      ->condition('s.id', $view->args[0])
      ->execute()
      ->fetchField();
  }
}

/**
 * Perform basic HTTP authentication.
 *
 * @param string $path
 *   Path to protect.
 * @param string $username
 *   Desired username.
 * @param string $password
 *   Desired password.
 * @param string $id
 *   An unique ID for flood controlling.
 * @param string $callback
 *   Additional callback for checking accessibility.
 * @param array $arguments
 *   List of arguments for additional access callback.
 *
 * @return bool
 *   A state of authentication.
 */
function smartdocs_wsdl_basic_auth($id = 'basic_auth', $callback = '', array $arguments = []) {
  $username = variable_get('smartdocs_basic_auth_username', '');
  $password = variable_get('smartdocs_basic_auth_password', '');

  // Credentials for authentication were received.
  if (isset($_SERVER['PHP_AUTH_PW'], $_SERVER['PHP_AUTH_USER'])) {
    $event = $id . '_basic_auth_failed_login_ip';
    $limit = variable_get($id . '_basic_auth_threshold_limit', 5);
    $window = variable_get($id . '_basic_auth_threshold_window', 3600);

    if (flood_is_allowed($event, $limit, $window)) {
      if ($password === $_SERVER['PHP_AUTH_PW'] && $username === $_SERVER['PHP_AUTH_USER']) {
        flood_clear_event($event);

        return !empty($callback) && is_callable($callback) ? (bool) call_user_func_array($callback, $arguments) : TRUE;
      }

      flood_register_event($event, $window);
    }
  }

  header('WWW-Authenticate: Basic realm="Restricted Area"');
  header('HTTP/1.1 401 Unauthorized');

  exit('Access denied.');
}