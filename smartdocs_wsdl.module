<?php
/**
 * @file
 * Provides a UI client for SOAP services
 */


/**
 * hook_form_alter()
 */
function smartdocs_wsdl_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'wsclient_service_form' && $form_state['op'] == 'edit') {
	$form['refresh_service'] = array (
	  '#type' => 'submit',
	  '#value' => 'Refresh service',
	  '#submit' => array ('smartdocs_wsdl_update_service')
	);
  }
}

/**
 * Update service/operations   if  they changed  in wsdl
 */
function smartdocs_wsdl_update_service($form, &$form_state) {
  $service = wsclient_service_load($form_state['wsclient_service']->name);
  $service->endpointUpdated = TRUE;
  $endpoint = $service->endpoint();
  $endpoint->initializeMetadata();
  $service->save();
  rules_clear_cache();
  $service->clearCache();
}

/**
 * hook_entity_presave()
 */
function smartdocs_wsdl_entity_presave($entity, $type) {
   /* create nodes for methods */
  if ($type == 'wsclient_service' && $entity->op == 'Save' && is_numeric($entity->id)) {
	  global $user;
    foreach ($entity->operations as $name => $operation) {
      $node = new stdClass();
      $node->title = $operation['label'];
      $node->type = "operations";
      node_object_prepare($node); 
      $node->uid = $user->uid; 
      $node->status = 1;
      $node->service_ref['und'][0]['value'] = $entity->id;

      $i = 0;
      foreach ($operation['parameter'] as $param_name => $parameter) {
        $node->field_parameters['und'][$i]['value'] = $param_name . ': ' . $parameter['type'];
        $i++;
      }

      $node = node_submit($node);
      node_save($node);
    }
  }
}




/**
 * Publish our testing UI and ajax callbacks.
 *
 * hook_menu()
 */
function smartdocs_wsdl_menu() {
  $id_count = 1;
  $op_count = $id_count + 2;
  $dt_count = $op_count;
  $ct_count = $op_count + 1;
  $ct_step_count =  $ct_count + 1;

  $items['soap/%wsclient_service/certify/%/%'] = array(
  'title' => 'certify service',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('smartdocs_wsdl_certify_operation_invoke', 1, 3, 4),
  'load arguments' => array($id_count),
  'access arguments' => array('access content'),
  'file' => 'smartdocs_wsdl.inc',
  'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  ); 

  $items['soap/%wsclient_service/operation/%wsclient_ui_operation/invoke'] = array(
    'title' => 'invoke operation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_operation_invoke', $id_count, $op_count),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  );

  $items['soap/%wsclient_service/type/%wsclient_ui_type'] = array(
    'title' => 'view datatypes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_type_viewer', $id_count, $dt_count),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  ); 

  $items['soap/%wsclient_service'] = array(
    'title' => 'view operations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_wsdl_operation_viewer', $id_count),
    'load arguments' => array($id_count),
    'access arguments' => array('access content'),
    'file' => 'smartdocs_wsdl.inc',
    'file path' => drupal_get_path('module', 'smartdocs_wsdl'),
  ); 
  return $items;
}

/**
 * Maps the type name from the name used by the remote info to the rules name.
 */
function smartdocs_wsdl_map_type($service_name, $service_types, $type) {
  if (is_array($type)) {
    foreach ($type as $key => $entry) {
      $type[$key] = smartdocs_wsdl_map_type($service_name, $service_types, $entry);
    }
    return $type;
  }
  if (isset($service_types[$type])) {
    //return 'smartdocs_wsdl_' . $service_name . '_' . $type;
    return $type;
  }
  if (strpos($type, 'list<') === 0 && isset($service_types[substr($type, 5, -1)])) {
    return 'list<smartdocs_wsdl_' . $service_name . '_' . substr($type, 5, -1) . '>';
  }
  return $type;
}
